plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
}
repositories {
    flatDir { dirs 'libs' }
}
base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}
mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

jarJar.enable()

minecraft {
    mappings channel: 'official', version: minecraft_version

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
//            workingDirectory project.file('run')
            workingDirectory project.file('../run_client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
        server {
//            workingDirectory project.file('run')
            workingDirectory project.file('../run_server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.1")) {
        jarJar.ranged(it, "[0.3.1,)")
    }
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    implementation fg.deobf("curse.maven:konkrete-410295:4514907")
    implementation fg.deobf("curse.maven:load-my-resources-forge-534502:4118355")
    minecraftLibrary("com.github.Keksuccino:japng:0.5.3")
    implementation fg.deobf("curse.maven:melody-938643:4953567")
    implementation fg.deobf("flatdir:FancyMenu-forge-1.18.2:3.0.0")
	//This is only to fix the missing dependency error in-dev
    implementation group: 'ca.weblite', name: 'java-objc-bridge', version: '1.1'

}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
